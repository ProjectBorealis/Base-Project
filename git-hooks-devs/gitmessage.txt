
# Commit message format
#----------------------------------#
# <type>([scope]): <subject>

# [body]

# [footer]
#----------------------------------#

# A commit type is a required prefix on the subject with the following options::

# * feat: a new feature
# * fix: a bug fix
# * docs: a change to docs or comments
# * style: style changes to the code that do not actually change the result
# * refactor: organizational/structural adjustments to code,
#   like renaming a variable
# * test: anything to do with tests
# * chore: any repo maintenance, build config changes

# Commit scope is an optional classifier which describes the system
# that you changed. This depends on the committer, but it could be,
# but not limited to, the following:

# * weapons
# * render
# * hud
# * config
# * logic
# * ai

# The commit message subject is an imperative, present-tense statement
# that describes the change in 50 characters or less.

# The optional commit message body, like the subject, is imperative
# and present-tense that is more detailed explanatory text.
# You should try to wrap your messages to 72 characters per line,
# because of how git formats things. You may also use a bulleted
# list as a summary of changes if you don't want to write it in paragraphs.

# Finally, the commit footer. This is optional and should be reserved
# for linking commits to GitLab issues (ex. Fixes #1), and documenting
# breaking changes or additional required steps for developers.
# These warnings should be labeled with "BREAKING CHANGE:"